/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectolab_kennethnuñez;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Kenneth Van Yableth
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        prohibited1.add(",");
        prohibited1.add(".");
        prohibited1.add(" ");
        prohibited1.add("?");
        prohibited1.add("!");
        prohibited1.add("¡");
        prohibited1.add("¿");
        prohibited1.add("'");
        prohibited1.add(";");
        prohibited1.add(":");
        prohibited1.add("#");
        prohibited1.add("$");
        prohibited1.add("*");
        prohibited1.add("-");
        prohibited1.add("|");

        String[] divider = "for|if|it|the|else|what|was|from|to|in|as|and|but|or|at|why|this|on|to|a|is|with".split("|");
        for (int i = 0; i < divider.length; i++) {
            prohibited2.add(divider[i]);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TextArea.setColumns(20);
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        jPanel1.setBackground(new java.awt.Color(51, 51, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("LAB #1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(251, 251, 251)
                .addComponent(jLabel1)
                .addContainerGap(232, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        jButton1.setText("Abrir Archivo");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Analizar");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jLabel2.setText("Designed by Apple in California");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(139, 139, 139)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(149, 149, 149))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        //Se limpian los arraylists por razones de que no se acumule informacion.
        WordBank.clear(); //Acumula todas las palabras que existen
        WordCont.clear(); //acumula el numero de veces que todas las palabras existen
        lineasinconexiones.clear(); //acumula linea por linea todas las palabras sin caracteres esp. y sin conexiones

        DistributionBank.clear(); //Mi acumulador de palabras distribuidas
        DistributionBankCont.clear(); //mi contador de cuantas veces aparecen //Por los momentos todas las palabras
        //aparecen como que estan solo una vez y salen las repetidas pero despues se limpia eso.

        DistributionBank2.clear(); //acumulador de palabras distribuidas
        DistributionBankCont2.clear();//contador de cuantas veces existe
        //al igual que la distribucion anterior, por los momentos sale repetido todo y quue solo existe una vez despues se limpia.

        TextArea.setText("");
        JFileChooser FC = new JFileChooser(); //Creo un file chooser para que seleccione el archivo
        FileNameExtensionFilter TEXTFILTER = new FileNameExtensionFilter("Archivos de Texto", "txt");
        FC.setFileFilter(TEXTFILTER);
        int action = FC.showOpenDialog(this);
        if (action == JFileChooser.APPROVE_OPTION) {
            File Archivo = null; //Creo un archivo y sus elementos para leerlo
            FileReader fr = null;
            BufferedReader br = null;
            String linea = "";
            String parsedLine = "";
            try {
                Archivo = FC.getSelectedFile();
                fr = new FileReader(Archivo);
                br = new BufferedReader(fr);
                while ((linea = br.readLine()) != null) { //mientras se le pueda seguir asignando la linea

                    //limpio mi acumulador por si las dudas.
                    parsedLine = ""; //El programa comienza y se analizara la linea ingresada para que le remueva todos los caracteres especiales.
                    for (int i = 0; i < linea.length(); i++) {
                        String temporal = Character.toString(linea.charAt(i));
                        if (temporal.equals(",") || temporal.equals(".") || temporal.equals("?") || temporal.equals("¡") || temporal.equals("!") || temporal.equals("¿") || temporal.equals("'") || temporal.equals(";") || temporal.equals(":") || temporal.equals("#") || temporal.equals("$") || temporal.equals("*") || temporal.equals("-")) {

                        } else {
                            parsedLine += temporal;
                        }
                    } // fin del for. este for quita los caracteres especiales.

                    lineasinconexiones.clear(); //limpio mi lineasinconexiones ya que podria habersele quedado algo de la vez anterior.
                    //hago un for que me limpie las conexiones(for in the what) que tiene mi lineaparseada.   
                    String[] PreParser = parsedLine.split(" ");
                    for (int i = 0; i < PreParser.length; i++) {
                        if (PreParser[i].matches("for|if|it|the|else|what|how|of|my|are|when|can|do|I| |was|from|to|in|as|and|but|or|at|why|this|on|to|a||is|with|How|using|an|What|what|not|Why|why|get|you|use|into|way|does|that|be")) {

                        } else {
                            lineasinconexiones.add(PreParser[i]);
                        }
                    } //este for le quita todos las conexiones a mi linea pero tambien le quito los espacios. y almaceno palabra por palabra en ese arraylist.

                    //Para todas las palabras de mi linea, si ya la tengo en mi banco pues le sumo cuantas veces existe sino la agrego.
                    for (int i = 0; i < lineasinconexiones.size(); i++) {
                        if (WordBank.contains(lineasinconexiones.get(i))) {
                            for (int j = 0; j < WordBank.size(); j++) {
                                if (WordBank.get(j).equals(lineasinconexiones.get(i))) {
                                    int wordconttemp = WordCont.get(j);
                                    wordconttemp++;
                                    WordCont.set(j, wordconttemp);
                                }
                            }
                        } else {
                            WordBank.add(lineasinconexiones.get(i));
                            WordCont.add(1);
                        }
                    }//Este for acumula todas las palabras que existen con su respectivo numero de apariciones en el texto.

                    //Okay entonces ya tengo todas mis palabras contadas. sin conexines y sin caracteres esp. en el arraylist de lineasincnexiones.
                    ArrayList<String> distribucionlineal = new ArrayList();
                    String casuality = "";
                    for (int i = 0; i < lineasinconexiones.size(); i++) {
                        for (int j = 0; j < lineasinconexiones.size(); j++) {
                            if (i != j) {
                                casuality = lineasinconexiones.get(i) + " " + lineasinconexiones.get(j);
                                ArrayList<String> temporal = new ArrayList();
                                temporal.add(lineasinconexiones.get(i));
                                temporal.add(lineasinconexiones.get(j));
                                Collections.sort(temporal);
                                String otratemp = temporal.get(0) + " " + temporal.get(1);
                                if (equals(distribucionlineal, otratemp)) {

                                } else {

                                    distribucionlineal.add(otratemp);
                                }
                            }
                        }
                    }
                    ArrayList<String> distribuciontriplelineal = new ArrayList();
                    String retrocausality = "";
                    for (int i = 0; i < lineasinconexiones.size(); i++) {
                        for (int j = 0; j < lineasinconexiones.size(); j++) {
                            for (int k = 0; k < lineasinconexiones.size(); k++) {
                                if (i != j && i != k && j != k) {
                                    
                                    ArrayList<String> temporal = new ArrayList();
                                    temporal.add(lineasinconexiones.get(i));
                                    temporal.add(lineasinconexiones.get(j));
                                    temporal.add(lineasinconexiones.get(k));
                                    Collections.sort(temporal);
                                    String otratemp = temporal.get(0) + " " + temporal.get(1) + " "+temporal.get(2);
                                    if (distribuciontriplelineal.contains(otratemp)) {

                                    } else {
                                        distribuciontriplelineal.add(otratemp);
                                    }
                                }
                            }
                        }
                    }

                    for (int i = 0; i < distribucionlineal.size(); i++) {
                        DistributionBank.add(distribucionlineal.get(i));
                        DistributionBankCont.add(1);
                    }
                    for (int i = 0; i < distribuciontriplelineal.size(); i++) {
                        DistributionBank2.add(distribuciontriplelineal.get(i));
                        DistributionBankCont2.add(1);
                    }
                    

                }//repetir por cada linea

                JOptionPane.showMessageDialog(this, "File Successfully loaded.");
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_jButton1MouseClicked
    public boolean equals(ArrayList<String> x, String y) {
        boolean cer = false;
        for (int i = 0; i < x.size(); i++) {
            if (x.get(i).equals(y)) {
                cer = true;
            }
        }
        return cer;
    }

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        TextArea.setText("");
        ArrayList<Integer> topten = TopTen();//Metodo top 10 me devuelve el top 10 de las palabras que existen.
        int toper = 1;
        TextArea.append("TOP TEN \n");
        for (int i = 0; i < topten.size(); i++) {
            for (int j = 0; j < WordCont.size(); j++) {
                if (WordCont.get(j).equals(topten.get(i)) && toper <= 10) {
                    TextArea.append(toper + "." + "  " + WordBank.get(j) + "   " + WordCont.get(j) + "\n");

                }
            }
            toper++;
        } //Este for recorre el top 10 de palabras que hay y le asigna su debido numero de ranking.

        TextArea.append("\n");
        TextArea.append("Fin del top ten, se imprimiran todas las frecuencias de las palabras a continuacion.");
        TextArea.append("\n");
        TextArea.append("\n");
        for (int i = 0; i < WordBank.size(); i++) {
            TextArea.append(WordBank.get(i) + "    " + WordCont.get(i) + "\n");
        }//Fin del for que me escribe todas las palabras que existen y cuantas veces existen.

        TextArea.append("\n");
        TextArea.append("Se imprimiran las palabras distribuidas en pares. \n");
        TextArea.append("\n");
        Clean(); //El metodo clean agarra los arraylists que teniamos al inicio y los limpia de las palabras repetidas y se encarga de que las veces
        //que aparece una palabra esten correctos
        Collections.sort(cleanargument);
        for (int i = 0; i < cleanargument.size(); i++) {
            TextArea.append(cleanargument.get(i) + "   " + cleanargumentCont.get(i) + "\n");
        } ///este for imprime todas las palabras ya de manera ordenada por orden alfabetico y encima cuantas veces aparece
        Clean2(); //Hace exactamente lo mismo que el Clean() pero para el otro arraylist de distribucion compleja.
        TextArea.append("\n");
        TextArea.append("Se imprimiran las palabras distribuidas en trios. \n");
        TextArea.append("\n");
        Collections.sort(cleanargument2);
        for (int i = 0; i < cleanargument2.size(); i++) {
            TextArea.append(cleanargument2.get(i) + "   " + cleanargumentCont2.get(i) + "\n");
        } //lo imprimo


    }//GEN-LAST:event_jButton2MouseClicked
    public void Clean() {
        ArrayList<String> DistributionTemporal = new ArrayList();
        ArrayList<Integer> DistributionRemoval = new ArrayList();

        for (int i = 0; i < DistributionBank.size(); i++) {
            String line = Extractor(DistributionBank, i); //metodo extractor agarra ese indice del arraylist y me trae la oracion ordenada por orden alfabetico
            int contador = 0;
            for (int j = 0; j < DistributionBank.size(); j++) {
                if (Extractor(DistributionBank, j).equals(line)) {
                    contador++;
                }
            }
            for (int j = 0; j < DistributionBank.size(); j++) {
                if (Extractor(DistributionBank, j).equals(line)) {
                    DistributionBankCont.set(j, contador);
                }
            }
            if (DistributionTemporal.contains(line)) {

            } else {
                DistributionTemporal.add(line);
            }
        } //este for se encarga nada mas de encontrar todas las combinaciones de palabras y cuantas veces existe pero el problema es
        //que no elimina las veces que sale repetido asi que solo sale, hola 4 hola 4 hola 4
        //el siguiente for se encarga de que solamente salga uno de esos hola 4.
        cleanargument.clear();
        cleanargumentCont.clear(); //estos son ya los arraylists que solo tienen todo limpito la informacion sin repetir y con indices correctos
        for (int i = 0; i < DistributionTemporal.size(); i++) {
            int cerote = 0;
            String liner = DistributionTemporal.get(i);
            for (int j = 0; j < DistributionBank.size(); j++) {
                int zemurray = j;
                String Liner2 = Extractor(DistributionBank, j);
                if (Liner2.equals(liner) && cerote == 0) {
                    cerote++;
                    cleanargument.add(DistributionBank.get(j));
                    cleanargumentCont.add(DistributionBankCont.get(j));
                } else if (Liner2.equals(liner)) {

                }
            }

        }
    }

    public void Clean2() {
        //lo mismito que el primer clean pereo la distributiva compleja
        ArrayList<String> DistributionTemporal = new ArrayList();
        ArrayList<Integer> DistributionRemoval = new ArrayList();

        for (int i = 0; i < DistributionBank2.size(); i++) {
            String line = Extractor(DistributionBank2, i);
            int contador = 0;
            for (int j = 0; j < DistributionBank2.size(); j++) {
                if (Extractor(DistributionBank2, j).equals(line)) {
                    contador++;
                }
            }
            for (int j = 0; j < DistributionBank2.size(); j++) {
                if (Extractor(DistributionBank2, j).equals(line)) {
                    DistributionBankCont2.set(j, contador);
                }
            }
            if (DistributionTemporal.contains(line)) {

            } else {
                DistributionTemporal.add(line);
            }
        }
        cleanargument2.clear();
        cleanargumentCont2.clear();
        for (int i = 0; i < DistributionTemporal.size(); i++) {
            int cerote = 0;
            String liner = DistributionTemporal.get(i);
            for (int j = 0; j < DistributionBank2.size(); j++) {
                int zemurray = j;
                String Liner2 = Extractor(DistributionBank2, j);
                if (Liner2.equals(liner) && cerote == 0) {
                    cerote++;
                    cleanargument2.add(DistributionBank2.get(j));
                    cleanargumentCont2.add(DistributionBankCont2.get(j));
                } else if (Liner2.equals(liner)) {

                }
            }

        }

    }

    public String Extractor(ArrayList<String> x, int y) { //agarra una frase y la ordena separada por espacios por orden alfabetico asi es mucho mas facil
        //comparar las lineas de las otros arraylists y asegurarse que nada este repetido como "mundo hola" == "hola mundo" y asi no aparezca dos veces.
        String linea = x.get(y);
        String[] splitter = linea.split(" ");
        String linea2 = "";
        ArrayList<String> prepostparser = new ArrayList();
        for (int i = 0; i < splitter.length; i++) {
            prepostparser.add(splitter[i]);
        }
        Collections.sort(prepostparser);
        for (int i = 0; i < prepostparser.size(); i++) {
            linea2 += prepostparser.get(i);
        }
        return linea2;
    }

    public ArrayList<Integer> TopTen() {
        ArrayList<Integer> x = new ArrayList();

        for (int i = 0; i < WordCont.size(); i++) {
            x.add(WordCont.get(i));
        }
        Collections.sort(x, Collections.reverseOrder());
        ArrayList<Integer> yet = new ArrayList();
        for (int i = 0; i < x.size(); i++) {
            if (yet.contains(x.get(i))) {

            } else {
                yet.add(x.get(i));
            }
        }
        return yet;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }
    static ArrayList<String> lineasinconexiones = new ArrayList();

    static ArrayList<String> WordBank = new ArrayList();
    static ArrayList<Integer> WordCont = new ArrayList();

    static ArrayList<String> DistributionBank = new ArrayList();
    static ArrayList<Integer> DistributionBankCont = new ArrayList();

    static ArrayList<String> DistributionBank2 = new ArrayList();
    static ArrayList<Integer> DistributionBankCont2 = new ArrayList();

    static ArrayList<String> cleanargument = new ArrayList();
    static ArrayList<Integer> cleanargumentCont = new ArrayList();

    static ArrayList<String> cleanargument2 = new ArrayList();
    static ArrayList<Integer> cleanargumentCont2 = new ArrayList();

    static ArrayList<String> prohibited1 = new ArrayList();
    static ArrayList<String> prohibited2 = new ArrayList();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
